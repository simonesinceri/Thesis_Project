function [allData, scenario, sensors] = mf_parking_Scenario()
%parking_Scenario - Returns sensor detections
%    allData = parking_Scenario returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = parking_Scenario optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.12 (R2022a) and Automated Driving Toolbox 3.5 (R2022a).
% Generated on: 26-Jul-2022 18:10:48

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
% Generate the target poses of all actors relative to the ego vehicle
poses = targetPoses(egoVehicle);
time  = scenario.SimulationTime;

objectDetections = {};
laneDetections   = [];
ptClouds = {};
insMeas = {};
isValidTime = false(1, numSensors);
isValidLaneTime = false(1, numSensors);
isValidPointCloudTime = false(1, numSensors);
isValidINSTime = false(1, numSensors);

% Generate detections for each sensor
for sensorIndex = 1:numSensors
    sensor = sensors{sensorIndex};
    % Generate the ego vehicle lane boundaries
    if isa(sensor, 'visionDetectionGenerator')
        maxLaneDetectionRange = min(500,sensor.MaxRange);
        lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
    end
    type = getDetectorOutput(sensor);
    if strcmp(type, 'Objects only')
        if isa(sensor,'ultrasonicDetectionGenerator')
            [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
            numObjects = length(objectDets);
        else
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        end
        objectDetections = [objectDetections; objectDets(1:numObjects)];
    elseif strcmp(type, 'Lanes only')
        [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
        laneDetections   = [laneDetections laneDets];
    elseif strcmp(type, 'Lanes and objects')
        [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)];
        laneDetections   = [laneDetections laneDets];
    elseif strcmp(type, 'Lanes with occlusion')
        [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
        laneDetections   = [laneDetections laneDets];
    elseif strcmp(type, 'PointCloud')
        if sensor.HasRoadsInputPort
            rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
            [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
        else
            [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
        end
        ptClouds = [ptClouds; ptCloud];
    elseif strcmp(type, 'INSMeasurement')
        insMeasCurrent = sensor(actorState, time);
        insMeas = [insMeas; insMeasCurrent];
        isValidINSTime(sensorIndex) = true;
    end
end

% Aggregate all detections into a structure for later use
if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
    allData(end + 1) = struct( ...
        'Time',       scenario.SimulationTime, ...
        'ActorPoses', actorPoses(scenario), ...
        'ObjectDetections', {objectDetections}, ...
        'LaneDetections', {laneDetections}, ...
        'PointClouds',   {ptClouds}, ...
        'INSMeasurements',   {insMeas});
end

%%%%%%%%%%%%%%%%%%%%%%%% AGGIUNGIAMO PLOT
plot(scenario)
%%%%%%%%%%%%%%%%%%%%%%%%%

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = ultrasonicDetectionGenerator('SensorIndex', 1, ...
    'MountingLocation', [2.47 0.01 0.2], ...
    'FieldOfView', [80 35], ...
    'Profiles', profiles);
sensors{2} = ultrasonicDetectionGenerator('SensorIndex', 2, ...
    'MountingLocation', [0.16 -0.02 0.2], ...
    'MountingAngles', [-180 0 0], ...
    'FieldOfView', [80 35], ...
    'Profiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [1.33 0.9], ...
    'Yaw', 90, ...
    'DetectorOutput', 'Lanes with occlusion', ...
    'Intrinsics', cameraIntrinsics([300 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 3;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0 0 0;
    25 0 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')];
laneSpecification = lanespec(1, 'Width', 20, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the actors
vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [2.05 8.32 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [20.05 8.12 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [11.4218662404233 3.09486084808245 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

